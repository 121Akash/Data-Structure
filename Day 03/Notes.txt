/*
C++ stl divided into 3 parts

//Algorithms
functions
containers
Iterators
*/


 //pair


 #include<bits/stdc++.h>
using namespace std;



 void explainPair (){
       pair<int ,int> p = {1,3};



       cout<<p.first<<" "<<p.second;
       // p.first=1
       //p.second = 3



         pair<int ,  pair<int ,int >> p  = {2,{4,5}};
         
         //p.first = 2
         //p.second.first = 4
         //p.second.second = 5




           pair<int ,int> arr[] = { {1,5}  ,{5,8} , { 6,3}};


           //arr[1].second = 8
           //arr[0].first = 1








 }


 void explainVector(){


      vector<int> v;




      v.push_back(1);
      v.emplace_back(2);



      vector<pair<int ,int>>vec;
      vec.push_back({1,2});
      vec.emplace_back(1,2);




      vector<int> v(5 ,100); //make container of size 5 and put 100 in each container just like array



      vector<int> v(5); // make container of size 5



      vector<int> v1(5 , 20);  // 5 instance of 20



      vector<int> v2(v1); // use for make copy v2 is a copy of v1 









      vector<int>::iterator it=v.begin();

      i++;


      cout<<*(it) <<" ";


      it= it+2;
      cout<<*(it) <<" ";

      vector<int>::iterator it =v.end();

      vector<int>::iterator it =v.rend();

      vector<int>::iterator it =v.rbegin();




      cout<<v[0] <<" "<<v.at(0);

      cout<<v.back()<<" ";

      for (vector<int>::iterator it = v.begin() ; it !=v.end() ;it++)
      {
        cout<< *(it) <<" ";
      }


      for (auto it = v.begin(); it !=v.end() ; it++)
      {
          cout<< *(it) <<" ";
      }


      for(auto it :v){
          cout<< *(it) <<" ";
      }



      //{10 ,20 ,12, 23}
      v.erase(v.begin()+1); //{10,12,23} resuffle

       //{10,20,12,23,35}
       v.erase(v.begin()+1 , v.begin() +4); //{10 ,35}



       //insert
       vector<int>v(2,100); //{100 ,100}
       v.insert(v.begin() ,300); //{300 , 100 , 100}

       //to insert multiple elemet
       v.insert(v.begin()+1 ,2,10); //{300 ,10,10,100,100

 }





 

 void explainList() {
  list<int> ls;


  ls.push_back(2); //{2}
  ls.emplace_back(4); //{2 ,4}

  ls.push_front(5); //{5, 2,4}


  ls.emplace_front();// {2 ,4};




 }














 //deque is excatlly similar to list or vector















 void explainStack(){
  stack<int> st;
  st.push(1); //{1}
  st.push(2),//{2,1}




  cout<<st.top(); //2

  st.pop();

  st.size(), //


 }











 void expalinqueue(){
  queue<int>q;


  q.push(1); //{1}
  q.push(2), //{1,2}
  q.emplace(4); //{1,2,4}



  q.back()+ =5;
  cout<<q.back() ; //print 9  {1,2,9}


  cout<<q.front(); //ptint 1

  q.pop(); //{2,9}


 }









//priority is most similar to queue but insert the element as per priority higher first then after others





//set allmost similar but the difference is it stord the thing in sorted order and stored alway unique value







































int main(){

}



 